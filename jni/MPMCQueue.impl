// Copyright (c) 2014 eeGeo. All rights reserved.

#include "MPMCQueue.h"

namespace Eegeo
{
	namespace Android
	{
		namespace Queues
		{
			template <typename T>
			MPMCQueue<T>::MPMCQueue()
			{
				pthread_mutex_init(&m_mutex, 0);
				sem_init(&m_signal, 0, 0);
			}

			template <typename T>
			MPMCQueue<T>::~MPMCQueue()
			{
				sem_destroy(&m_signal);
				pthread_mutex_destroy(&m_mutex);
			}
			
			template <typename T>
			size_t MPMCQueue<T>::Size() const
			{
				size_t size = 0;
				pthread_mutex_lock(&m_mutex);
				size = m_queue.size();
				pthread_mutex_unlock(&m_mutex);
				return size;
			}

			template <typename T>
			void MPMCQueue<T>::Enqueue(T message)
			{
				pthread_mutex_lock(&m_mutex);
				m_queue.push(message);
				pthread_mutex_unlock(&m_mutex);
				sem_post(&m_signal);
			}

			template <typename T>
			T MPMCQueue<T>::Dequeue()
			{				
			    sem_wait(&m_signal);
				return DequeueMessageFromHead();
			}

			template <typename T>
			bool MPMCQueue<T>::TryDequeue(T& message)
			{
				if (sem_trywait(&m_signal) == 0)
				{
					message = DequeueMessageFromHead();
					return true;
				}
				return false;
			}

			template <typename T>
			T MPMCQueue<T>::DequeueMessageFromHead()
			{
				pthread_mutex_lock(&m_mutex);
				T message = m_queue.front();
				m_queue.pop();
				pthread_mutex_unlock(&m_mutex);
				return message;
			}
		}
	}
}